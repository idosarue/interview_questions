Exercise 1 : Items And Customers
Instructions
We will work on the public database that we created yesterday.

Use SQL to get the following from the database:
All items, ordered by price (lowest to highest).
Items with a price above 80 (80 included), ordered by price (highest to lowest).
The first 3 customers in alphabetical order (A-Z) – exclude ‘id’ from the results.
All last names (no other columns!), in reverse alphabetical order (Z-A)

Create a table named purchases. It should have 2 columns : customer_id and item_id. These columns are references from the tables customers and items. Edit the data of the purchases table:
Add a row which references a customer by ID, but does not reference an item by ID (leave it blank). Does this work? Why/why not?
Add 5 rows which reference existing customers and items.

Use SQL to get the following from the database:
All purchases. Is this information useful to us?
All purchases, joining with the customers table.
Purchases of the customer with the ID equal to 4.
Purchases for a large desk AND a small desk

Create a purchase for Scott Scott – he bought a hard drive.

Use SQL to show all the customers who have made a purchase. Show the following fields/columns:
Customer first name
Customer last name
Item name


Exercise 2 : Dvdrental Database
Instructions
Setup
We will install a new sample database on our PostgreSQL servers.
Download this sample database file

There is a single file called dvdrental.tar inside the zip. Extract it to your local directory.
Tip : If you are using Mac, after extracting the zip file you will get a folder called dvdrental

Go to pgAdmin4, and navigate to Databases on the left panel.

Right click > Create > Database…

Type in the name of the new database: dvdrental, and click Save. Wait a few moments.

Right click on dvdrental under Databases in the left panel.

Click Restore….

For PC users choose the following format Custom or tar. For Mac Users, choose the following format Directory.

Next to Filename, you should see a button with 3 dots on it. Click the button.

For PC users: “Find your file in the window”. For Max users: “Find your folder in the window”. (you may have to check Show hidden files and folders?), and click the Select button.

If you receive a “Utility not found” Error, you need to change pgadmin binary path. Check out this video

If you see any error messages, please save them and get assistance. If not, you should have a new database loaded into your server!

Here is a diagram of the tables in the server. Take a look at it and learn about the tables, their columns, and the relationships between the different tables.
If you have a problem importing the database, here are the DEFAULT instructions



diagram



We will use the newly installed dvdrental database.

In the dvdrental database write a query to select all the columns from the “customer” table.

Write a query to display the names (first_name, last_name) using an alias named “full_name”.

Lets get all the dates that accounts were created. Write a query to select all the create_date from the “customer” table (there should be no duplicates).

Write a query to get all the customer details from the customer table, it should be displayed in descending order by their first name.

Write a query to get the film ID, title, description, year of release and rental rate in ascending order according to their rental rate.

Write a query to get the address, and the phone number of all customers living in the Texas district, these details can be found in the “address” table.

Write a query to retrieve all movie details where the movie id is either 15 or 150.

Write a query which should check if your favorite movie exists in the database. Have your query get the film ID, title, description, length and the rental rate, these details can be found in the “film” table.

No luck finding your movie? Maybe you made a mistake spelling the name. Write a query to get the film ID, title, description, length and the rental rate of all the movies starting with the two first letters of your favorite movie.

Write a query which will find the 10 cheapest movies.

Not satisfied with the results. Write a query which will find the next 10 cheapest movies.
Bonus: Try to not use LIMIT.

Write a query which will join the data in the customer table and the payment table. You want to get the amount and the date of every payment made by a customer, ordered by their id (from 1 to…).

You need to check your inventory. Write a query to get all the movies which are not in inventory.

Write a query to find which city is in which country.

Bonus You want to be able to see how your sellers have been doing? Write a query to get the customer’s id, names (first and last), the amount and the date of payment ordered by the id of the staff member who sold them the dvd.


*********************

Exercise 1 : Items And Customers
1.
1.1 select * from items order by price asc;

1.2select * from items where price >=80 order by price desc;

1.3 select first_name, last_name from customers order by first_name limit 3;
1.4 select last_name from customers order by last_name desc;

2.
create table purchases(item_id integer, customer_id integer, foreign key(item_id) references items(item_id), foreign key(customer_id) references customers(customers_id))

2.1. insert into purchases(item_id) values(1); it works because there's no not null constraint
2.2.insert into purchases(item_id, customer_id) values (1,1), (2,2),(3,3),(3,4), (2,5);

3.

3.1 select * from purchases;
3.2 select * from purchases inner join customers on customer_id=customers_id;
3.3 select * from purchases where customer_id = 4;
3.4  select * from purchases where item_id in (1, 2);

4.  insert into items (item_name, price) values ('hard_drive',300);
 insert into purchases (item_id, customer_id) values (4,3);

5.select customers.first_name, customers.last_name, items.item_name from customers inner join purchases on customers.customer_id = purchases.customer_id inner join items on purchases.item_id = items.item_id;

***********************************
Exercise 2 : Dvdrental Database

1.select * from customer;
2.select first_name, last_name as full_name from customer;
3.select distinct create_date from customer; 
4. select * from customer order by first_name desc;
5. select film_id, title, description, release_year, rental_rate from film order by rental_rate asc;
6.  select address, phone from customer inner join address on customer.address_id = address.address_id and address.district = 'Texas';
7. select * from film where film_id in (15,150);
8. select film_id, title, description, length, rental_rate from film where title ilike 'Forest Gump';
9.  select film_id, title, description, length, rental_rate from film where title ilike 'ba%';
10. select title, rental_rate from film order by rental_rate limit 10;
11. select title, rental_rate, film_id from film order by rental_rate offset 20 rows fetch first 10 rows only;
12.select customer.customer_id, payment.amount, payment.payment_date from customer inner join payment on customer.customer_id = payment.customer_id order by customer.customer_id;
13. select title, film_id from film where film_id not in (select film_id from inventory);
14. select country.country, city.city from country inner join city on country.country_id = city.country_id;
15. select customer.customer_id, customer.first_name, customer.last_name, payment.payment_date, payment.amount from customer inner join payment on customer.customer_id = payment.customer_id order by payment.staff_id;